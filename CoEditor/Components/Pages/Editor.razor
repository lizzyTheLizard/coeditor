@page "/editor"
@rendermode InteractiveServer
@attribute [Authorize]
@inject AiService AiService
@inject UndoService UndoService
@inject IJSRuntime JSRuntime
@inject ILogger<Editor> Logger

<PageTitle>Editor</PageTitle>
<div class="layout">
    <h3>Context</h3>
    <EditorContext
        @bind-Context="Context"
        @bind-Language="Language"
        OnContextReset="@(() => {Text = ""; UndoService.Clean();})">
    </EditorContext>
    <h3>Editor</h3>
    <div class="editor">
        @if (Busy)
        {
            <div class="overlay">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        <textarea id="editorTextarea" @bind="Text" @bind:after="@(() => UndoService.Register(Text))"/>
        <div class="buttonBar">
            <EditorButton OnClick="@HandleActionAsync" ActionType="typeof(Propose)"></EditorButton>
            <EditorButton Enabled="@HasText" OnClick="@HandleActionAsync" ActionType="typeof(Reformulate)"></EditorButton>
            <EditorButton Enabled="@HasText" OnClick="@HandleActionAsync" ActionType="typeof(Shorten)"></EditorButton>
            <EditorButton Enabled="@HasText" OnClick="@HandleActionAsync" ActionType="typeof(Prolong)"></EditorButton>
            <EditorButton Enabled="@HasText" OnClick="@HandleActionAsync" ActionType="typeof(CheckAndImprove)"></EditorButton>
            <EditorButton Enabled="@UndoService.CanUndo" OnClick="@(() => Text = UndoService.Undo())" Name="Undo"></EditorButton>
            <EditorButton Enabled="@UndoService.CanRedo" OnClick="@(() => Text = UndoService.Redo())" Name="Redo"></EditorButton>
        </div>
    </div>
</div>

@code {
    private string Text { get; set; } = "";
    private string Context { get; set; } = "";
    private Language Language { get; set; } = Language.EN;
    private bool Busy { get; set; } = false;
    private bool HasText => !string.IsNullOrWhiteSpace(Text);

    private void OnContextReset()
    {
        Text = "";
        UndoService.Clean();
    }

    private async Task HandleActionAsync(EditorAction action)
    {
        Busy = true;
        var selection = await GetSelectionAsync();
        var parameters = new CommandInput(Language, Text, Context, selection);
        try
        {
            Text = await AiService.RunActionAsync(action, parameters);
            UndoService.Register(Text);
        }
        catch (Exception e)
        {
            //TODO: Error Handling
            Logger.LogError("Could not execute command", e);
        }
        Busy = false;
    }


    private async Task<Selection?> GetSelectionAsync()
    {
        var textareaId = "editorTextarea";
        var selectionStart = await JSRuntime.InvokeAsync<int>("getSelectionStart", textareaId);
        var selectionEnd = await JSRuntime.InvokeAsync<int>("getSelectionEnd", textareaId);
        return (selectionStart == -1 || selectionEnd == -1 || selectionStart == selectionEnd)
            ? null
            : new Selection(selectionStart, selectionEnd);
    }
}

