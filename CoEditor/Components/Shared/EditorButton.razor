@inject ShortcutService ShortcutService

<button class="btn btn-primary" disabled="@(!Enabled)" @onclick="HandleOnClickAsync">@ButtonText</button>

@code{
    [Parameter]
    public bool Enabled { get; set; } = true;

    [Parameter]
    public Type? ActionType { get; set; }

    [Parameter]
    public EventCallback<EditorAction> OnClick { get; set; }

    [Parameter]
    public string? Name { get; set; }

    private string ButtonText
    {
        get
        {
            if (Name != null) return Name;
            if (ActionType != null) return EditorAction.GetName(ActionType);
            throw new Exception("Name or ActionType must be set");
        }
    }

    protected override void OnInitialized()
    {
        if (ActionType == null) return;
        EditorAction.GetShortcuts(ActionType)
            .ForEach(k => ShortcutService.RegisterShortcut(k, () => HandleOnClickAsync()));
    }

    private async Task HandleOnClickAsync()
    {
        if(ActionType == null)
        {
            await OnClick.InvokeAsync();
        } else
        {
            var action = (EditorAction?)Activator.CreateInstance(ActionType, new object[] { });
            if (action == null) throw new Exception("Could not create action");
            await OnClick.InvokeAsync(action);
        }
    }
}
