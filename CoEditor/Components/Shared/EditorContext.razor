<div class="layout">
    <textarea @bind="Context" @bind:after="() => ContextChanged.InvokeAsync(Context)"/>
    <div class="buttonBar">
        <div class="layout">
            <select class="form-select" 
                    aria-label="Language select" 
                    @bind="Language" 
                    @bind:after="() => LanguageChanged.InvokeAsync(Language)">
                <option value="EN">English</option>
                <option value="DE">Deutsch</option>
            </select>
        </div>
        <EditorButton OnClick="@ContextResetAsync" Name="Clean"></EditorButton>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnContextReset { get; set; }

    [Parameter]
    public Language Language { get; set; } = Language.EN;

    [Parameter]
    public EventCallback<Language> LanguageChanged { get; set; }

    //TODO: Better initial context
    [Parameter]
    public string Context { get; set; } = "";

    [Parameter]
    public EventCallback<string> ContextChanged { get; set; }


    private async Task ContextResetAsync()
    {
        //TODO: Better initial context
        Context = "";
        await OnContextReset.InvokeAsync(null);
        await ContextChanged.InvokeAsync(Context);
    }

    //TODO: Implement different context types

    /*

    public async Task<Template[]> GetTemplatesAsync(Language language)
        {
        var userName = await GetUserNameAsync();
        return await Templates
            .Where(t => t.Language == language)
            .Where(t => t.UserName == userName)
    .ToArrayAsync();
    }

    public Template[] GetSystemTemplates(Language language)
        {
            return [
            new Template() { Id = Guid.NewGuid(), Name = "Free", Text = "{context%textarea}", UserName = "", Language = language }
    ];
    }
    */
}
