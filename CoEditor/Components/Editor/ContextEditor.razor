@inject IJSRuntime JsRuntime
@inject ExceptionService ExceptionService

@foreach (var param in _templateParameters)
{
    @switch (param.Type)
    {
        case TemplateParameterType.Text:
            <div class="col min-col-width">
                <label for="@param.Id" class="form-label">@param.Name</label>
                <InputText id="@param.Id"
                           class="@("form-control form-control-sm mb-1 " + (param.Valid ? "is-valid" : "is-invalid"))"
                           @bind-Value="param.Value"
                           @bind-Value:after="AfterParameterChanged"/>
            </div>
            break;
        case TemplateParameterType.LongText:
            break;
        case TemplateParameterType.Select:
            <div class="col min-col-width">
                <label for="@param.Id" class="form-label">@param.Name</label>
                <InputSelect id="@param.Id"
                             class="@("form-select form-select-sm mb-1 " + (param.Valid ? "is-valid" : "is-invalid"))"
                             @bind-Value="param.Value"
                             @bind-Value:after="AfterParameterChanged">
                    <option selected disabled>Select</option>
                    @foreach (var option in param.Options)
                    {
                        <option value="@option">@option</option>
                    }
                </InputSelect>
            </div>
            break;
        default:
            throw new InvalidOperationException($"Unknown parameter type {param.Type}");
    }
}
<div class="col-12 p-0"></div>
@foreach (var param in _templateParameters)
{
    @if (param.Type == TemplateParameterType.LongText)
    {
        <div class="col min-col-width">
            <label for="@param.Id" class="form-label">@param.Name</label>
            <InputTextArea id="@param.Id"
                           class="@("form-control form-control-sm mb-1 " + (param.Valid ? "is-valid" : "is-invalid"))"
                           @bind-Value="param.Value"
                           @bind-Value:after="AfterParameterChanged"/>
        </div>
    }
}

@code {
    [Parameter]
    public Template? Template { get; set; }

    [Parameter]
    public string? Context { get; set; }

    [Parameter]
    public EventCallback<string?> ContextChanged { get; set; }

    private TemplateParameter[] _templateParameters = [];
    private Template? _oldTemplate;
    private Guid? _focusToBeSet;

    protected override async Task OnParametersSetAsync()
    {
        // We are only interested in changes to the "Template" parameter
        if (Template == _oldTemplate) return;
        _oldTemplate = Template;
        await AfterTemplateChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_focusToBeSet == null) return;
        await JsRuntime.InvokeVoidAsync("setFocus", _focusToBeSet);
        _focusToBeSet = null;
    }

    private async Task AfterTemplateChanged()
    {
        Context = null;
        await ContextChanged.InvokeAsync(Context);
        if (Template == null)
        {
            return;
        }

        try
        {
            _templateParameters = Template.GetTemplateParameters();
            await AfterParameterChanged();
            _focusToBeSet = _templateParameters.FirstOrDefault()?.Id;
        }
        catch (Exception e)
        {
            await ExceptionService.HandleException(e, 2102,
                "Could not load template parameters. Template seems to be invalid.");
        }
    }

    private async Task AfterParameterChanged()
    {
        var valid = _templateParameters.All(p => p.Valid);
        switch (valid)
        {
            case false when Context == null:
                return;
            case false:
                Context = null;
                await ContextChanged.InvokeAsync(Context);
                return;
            default:
                Context = Template!.CalculateText(_templateParameters);
                await ContextChanged.InvokeAsync(Context);
                return;
        }
    }
}
