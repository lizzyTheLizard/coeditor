@inject ShortcutService ShortcutService
@implements IDisposable

<div class="col">
    <button class="btn btn-primary container p-0" disabled="@Disabled" @onclick="HandleOnClickAsync">
        <div class="row align-items-center g-1">
            <div class="col">@DisplayName</div>
            <div class="col shortcut">(Alt + @ActualShortcut)</div>
        </div>
    </button>
</div>

@code{

    [Parameter]
    public bool Disabled { get; set; } = true;

    [Parameter]
    public ActionName? ActionName { get; set; }

    [Parameter][EditorRequired]
    public EventCallback<ActionName> OnTriggered { get; set; }

    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public char? Shortcut { get; set; }

    private ShortcutSubscription? _subscription;

    private string DisplayName => Name ?? ActionName.ToString() ?? "Undefined";
    private char ActualShortcut => Shortcut?? DisplayName.FirstOrDefault();

    protected override void OnInitialized()
    {
        _subscription = ShortcutService.RegisterShortcut(ActualShortcut, HandleOnClickAsync);
    }

    private Task HandleOnClickAsync()
    {
        if (Disabled) return Task.CompletedTask;
        return ActionName == null ? OnTriggered.InvokeAsync() : OnTriggered.InvokeAsync(ActionName.Value);
    }

    public void Dispose()
    {
        _subscription?.Dispose();
        _subscription = null;
    }

}