@inject UndoService UndoService
@inject IJSRuntime JsRuntime
@inject ConversationService ConversationService

<div class="d-flex flex-column flex-grow-1 pb-1">
    <label for="editorTextarea" class="form-label">Editor</label>
    <InputTextArea id="editorTextarea"
                   disabled="@(Text == null)"
                   class="form-control flex-grow-1"
                   @bind-Value="Text"
                   @bind-Value:after="() => TextChanged.InvokeAsync(Text)"/>
</div>
<div class="container-fluid p-0">
    <div class="row g-1">
        <ActionButton Disabled="@(Text == null)" OnTriggered="OnActionButtonAsync"
                      ActionName="ActionName.Reformulate"></ActionButton>
        <ActionButton Disabled="@(Text == null)" OnTriggered="OnActionButtonAsync"
                      ActionName="ActionName.Improve"></ActionButton>
        <ActionButton Disabled="@(Text == null)" OnTriggered="OnActionButtonAsync"
                      ActionName="ActionName.Summarize"></ActionButton>
        <ActionButton Disabled="@(Text == null)" OnTriggered="OnActionButtonAsync"
                      ActionName="ActionName.Expand"></ActionButton>
        <ActionButton Disabled="@(Text == null || !UndoService.CanUndo)" Shortcut="'Z'"
                      OnTriggered="OnUndo" Name="Undo"></ActionButton>
        <ActionButton Disabled="@(Text == null || !UndoService.CanRedo)" Shortcut="'Y'"
                      OnTriggered="OnRedo" Name="Redo"></ActionButton>
        <ActionButton Disabled="@(Text == null)"
                      OnTriggered="() => ClearConversation.InvokeAsync()" Name="Clear"></ActionButton>
    </div>
</div>

@code {
    [Parameter]
    public string? Text { get; set; }

    [Parameter]
    public EventCallback<string> TextChanged { get; set; }

    [Parameter]
    public EventCallback<ActionEvent> ActionCalled { get; set; }

    [Parameter]
    public EventCallback ClearConversation { get; set; }

    private string? _focusToBeSet;
    private string? _oldText;

    protected override void OnParametersSet()
    {
        // We are only interested in changes to the "Text" parameter
        if (_oldText == Text) return;
        if (_oldText == null && Text != null)
        {
            //This is a new conversation
            UndoService.Reset(Text);
            _focusToBeSet = "editorTextarea";
        }

        if (Text != null) UndoService.Register(Text);
        _oldText = Text;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_focusToBeSet == null) return;
        await JsRuntime.InvokeVoidAsync("setFocus", _focusToBeSet);
        _focusToBeSet = null;
    }

    private async Task OnActionButtonAsync(ActionName actionName)
    {
        var selection = await GetSelectionAsync();
        var actionEvent = new ActionEvent(actionName, selection);
        await ActionCalled.InvokeAsync(actionEvent);
    }

    private async Task OnUndo()
    {
        Text = UndoService.Undo();
        await TextChanged.InvokeAsync(Text);
    }

    private async Task OnRedo()
    {
        Text = UndoService.Redo();
        await TextChanged.InvokeAsync(Text);
    }

    private async Task<Selection?> GetSelectionAsync()
    {
        const string textareaId = "editorTextarea";
        var selectionStart = await JsRuntime.InvokeAsync<int>("getSelectionStart", textareaId);
        var selectionEnd = await JsRuntime.InvokeAsync<int>("getSelectionEnd", textareaId);
        return selectionStart == -1 || selectionEnd == -1 || selectionStart == selectionEnd
            ? null
            : new Selection(selectionStart, selectionEnd);
    }
}
