@page "/settings"
@using CoEditor.Client.Pages.SettingsComponents
@attribute [Authorize]
@inject TemplateService TemplateService
@inject ProfileService ProfileService

<PageTitle>Settings</PageTitle>
<div class="container-fluid">
    <LanguageSelector
        @bind-Language="_language"
        @bind-Language:after="OnLanguageChanged"/>
    <ProfileEditor
        ProfileText="@_profileText"
        ProfileChanged="OnProfileChanged"
        Language="_language"/>
    @foreach (var template in _templates)
    {
        <TemplateEditor
            Template="template"
            TemplateChanged="OnTemplateChanged"
            TemplateDeleted="OnTemplateDeleted"/>
    }
    <NewTemplate
        Language="_language"
        TemplateAdded="OnTemplateAdded"
    />
</div>
<ErrorDialog/>
<BusyDialog Busy="@_busy"/>

@code{
    private Language _language = Language.De;
    private Template[] _templates = [];
    private string _profileText = "";
    private bool _busy = true;

    protected override Task OnInitializedAsync() => OnLanguageChanged();

    private async Task OnLanguageChanged()
    {
        _busy = true;
        StateHasChanged();
        _profileText = await ProfileService.GetProfileAsync(_language);
        _templates = (await TemplateService.GetTemplatesAsync(_language))
            .Where(t => !t.DefaultTemplate)
            .ToArray();
        _busy = false;
        StateHasChanged();
    }

    private async Task OnTemplateDeleted(Template template)
    {
        _busy = true;
        StateHasChanged();
        await TemplateService.DeleteTemplate(template);
        _templates = _templates.Where(t => t != template).ToArray();
        _busy = false;
        StateHasChanged();
    }

    private async Task OnTemplateChanged(Template template)
    {
        _busy = true;
        //Update the template before StateHasChanged, otherwise the old template will be displayed
        var tIndex = Array.FindIndex(_templates, t => t.Id == template.Id);
        _templates[tIndex] = template;
        StateHasChanged();
        await TemplateService.UpdateTemplate(template);
        _busy = false;
        StateHasChanged();
    }

    private async Task OnTemplateAdded(Template template)
    {
        _busy = true;
        StateHasChanged();
        await TemplateService.CreateTemplate(template);
        _templates = [.._templates, template];
        _busy = false;
        StateHasChanged();
    }

    private async Task OnProfileChanged(string profileText)
    {
        _busy = true;
        //Update the text before StateHasChanged, otherwise the old text will be displayed
        _profileText = profileText;
        StateHasChanged();
        await ProfileService.UpdateProfile(_language, profileText);
        _busy = false;
        StateHasChanged();
    }

}
