@page "/settings"
@using CoEditor.Client.Pages.SettingsComponents
@attribute [Authorize]
@inject TemplateService TemplateService
@inject ProfileService ProfileService

<PageTitle>Settings</PageTitle>
<div class="container-fluid">
    <LanguageSelector
        @bind-Language="_language"
        @bind-Language:after="OnLanguageChanged"/>
    <ProfileEditor
        @bind-ProfileText="_profileText"
        SaveProfile="OnSaveProfile"
        Language="_language"/>
    @for(var i = 0 ; i < _templateTexts.Length; i++)
    {
       var localVariable = i;
        <TemplateEditor
            Id="_templates[localVariable].Id"
            TemplateName="@_templates[localVariable].Name"
            @bind-TemplateText="_templateTexts[localVariable]"
            SaveTemplate="() => OnSaveTemplate(localVariable)"
            DeleteTemplate="() => OnDeleteTemplate(localVariable)"/>
    }
    <NewTemplate
        Language="_language"
        TemplateAdded="OnTemplateAdded"
    />
</div>
<ErrorDialog/>
<BusyDialog Busy="@_busy"/>

@code{
    private Language _language = Language.De;
    private Template[] _templates = [];
    private string[] _templateTexts = [];
    private string _profileText = "";
    private bool _busy = true;

    protected override Task OnInitializedAsync() => OnLanguageChanged();

    private async Task OnLanguageChanged()
    {
        _busy = true;
        StateHasChanged();
        _profileText = await ProfileService.GetProfileAsync(_language);
        _templates = (await TemplateService.GetTemplatesAsync(_language))
            .Where(t => !t.DefaultTemplate)
            .ToArray();
        _templateTexts = _templates.Select(t => t.Text).ToArray();
        _busy = false;
        StateHasChanged();
    }

    private async Task OnDeleteTemplate(int i)
    {
        _busy = true;
        StateHasChanged();
        await TemplateService.DeleteTemplate(_templates[i]);
        _templates = _templates.Where((t, index) => index != i).ToArray();
        _templateTexts = _templateTexts.Where((t, index) => index != i).ToArray();
        _busy = false;
        StateHasChanged();
    }

    private async Task OnSaveTemplate(int i)
    {
        _busy = true;
        StateHasChanged();
        var template =  new Template()
        {
            Id = _templates[i].Id,
            Name = _templates[i].Name,
            Language = _language,
            UserName = _templates[i].UserName,
            DefaultTemplate = _templates[i].DefaultTemplate,
            Text = _templateTexts[i]
        };
        await TemplateService.UpdateTemplate(template);
        _busy = false;
    }

    private async Task OnTemplateAdded(Template template)
    {
        _busy = true;
        StateHasChanged();
        await TemplateService.CreateTemplate(template);
        _templates = [.._templates, template];
        _templateTexts = [.._templateTexts, template.Text];
        _busy = false;
    }

    private async Task OnSaveProfile()
    {
        _busy = true;
        StateHasChanged();
        await ProfileService.UpdateProfile(_language, _profileText);
        _busy = false;
    }

}
