@page "/settings"
@using CoEditor.Client.Pages.SettingsComponents
@attribute [Authorize]
@inject TemplateService TemplateService
@inject ProfileService ProfileService

<PageTitle>Settings</PageTitle>
<div class="container-fluid">
    <LanguageSelector
        @bind-Language="_language"
        @bind-Language:after="OnLanguageChanged"/>
    <ProfileEditor
        Profile="_profile"
        SaveProfile="OnSaveProfile"/>
    @foreach (var template in _templates)
    {
        <TemplateEditor
            Template="template"
            SaveTemplate="() => OnSaveTemplate(template)"
            DeleteTemplate="() => OnDeleteTemplate(template)"/>
    }
    <NewTemplate
        Language="_language"
        AddTemplate="OnAddTemplate"/>
</div>
<ErrorDialog/>
<BusyDialog Busy="@_busy"/>

@code{
    private Language _language = Language.De;
    private Template[] _templates = [];
    private Profile? _profile;
    private bool _busy = true;

    protected override Task OnInitializedAsync()
    {
        return OnLanguageChanged();
    }

    private async Task OnLanguageChanged()
    {
        _busy = true;
        StateHasChanged();
        _profile = await ProfileService.GetProfileAsync(_language);
        _templates = (await TemplateService.GetTemplatesAsync(_language))
            .Where(t => !t.DefaultTemplate)
            .ToArray();
        _busy = false;
    }

    private async Task OnDeleteTemplate(Template template)
    {
        _busy = true;
        StateHasChanged();
        await TemplateService.DeleteTemplate(template);
        _templates = _templates.Where(t => t.Id != template.Id).ToArray();
        _busy = false;
    }

    private async Task OnSaveTemplate(Template template)
    {
        _busy = true;
        StateHasChanged();
        await TemplateService.UpdateTemplate(template);
        _busy = false;
    }

    private async Task OnAddTemplate(Template template)
    {
        _busy = true;
        StateHasChanged();
        await TemplateService.CreateTemplate(template);
        _templates = [.._templates, template];
        _busy = false;
    }

    private async Task OnSaveProfile()
    {
        _busy = true;
        StateHasChanged();
        await ProfileService.UpdateProfile(_profile!);
        _busy = false;
    }
}
