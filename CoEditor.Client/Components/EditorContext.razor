@inject TemplateService TemplateService

<div class="d-flex flex-wrap mx-n1">
    <div class="col-6 px-1 pb-1">
        <label for="language" class="form-label">Language</label>
        <InputSelect id="language" class="form-select form-select-sm" @bind-Value="Language"
                     @bind-Value:after="@(() => TemplateService.SetLanguageAsync(Language))">
            @foreach (var language in Enum.GetValues<Language>())
            {
                <option value="@language">@language</option>
            }
        </InputSelect>
    </div>
    <div class="col-6 px-1 pb-1">
        <label for="template" class="form-label">Template</label>
        <InputSelect id="template" class="form-select form-select-sm" @bind-Value="TemplateId"
                     @bind-Value:after="@(() => TemplateService.TemplateIdChangedAsync(TemplateId))">
            @foreach (var template in TemplateService.Templates)
            {
                <option value="@template.Id">@template.Name</option>
            }
        </InputSelect>
    </div>
    @foreach (var param in TemplateService.TemplateParameters)
    {
        @switch (param.Type)
        {
            case TemplateParameterType.Text:
                <div class="col-6 px-1 pb-1">
                    <label for="@param.Id" class="form-label">@param.Name</label>
                    <InputText id="@param.Id"
                               class="@("form-control form-control-sm mb-1 " + (param.Valid ? "is-valid" : "is-invalid"))"
                               @bind-Value="param.Value"
                               @bind-Value:after="@(() => TemplateService.ParameterChangedAsync())"/>
                    <div class="invalid-feedback">Required</div>
                </div>
                break;
            case TemplateParameterType.LongText:
                <div class="col-12 px-1 pb-1">
                    <label for="@param.Id" class="form-label">@param.Name</label>
                    <InputTextArea id="@param.Id"
                                   class="@("form-control form-control-sm mb-1 " + (param.Valid ? "is-valid" : "is-invalid"))"
                                   @bind-Value="param.Value"
                                   @bind-Value:after="@(() => TemplateService.ParameterChangedAsync())"/>
                    <div class="invalid-feedback">Required</div>
                </div>
                break;
            case TemplateParameterType.Select:
                <div class="col-6 px-1 pb-1">
                    <label for="@param.Id" class="form-label">@param.Name</label>
                    <InputSelect id="@param.Id"
                                 class="@("form-select form-select-sm mb-1 " + (param.Valid ? "is-valid" : "is-invalid"))"
                                 @bind-Value="param.Value"
                                 @bind-Value:after="@(() => TemplateService.ParameterChangedAsync())">
                        <option selected disabled>Select</option>
                        @foreach (var option in param.Options)
                        {
                            <option value="@option">@option</option>
                        }
                    </InputSelect>
                    <div class="invalid-feedback">Required</div>
                </div>
                break;
            default:
                throw new Exception($"Unknown parameter type {param.Type}");
        }
    }
</div>

@code {
    private Language Language { get; set; } = Language.En;
    private Guid TemplateId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //TODO: Fix Loading Pattern for Context
        await TemplateService.SetLanguageAsync(Language);
    }

}
