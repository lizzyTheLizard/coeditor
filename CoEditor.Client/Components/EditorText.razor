@inject UndoService UndoService
@inject IJSRuntime JsRuntime
@inject ConversationService ConversationService

<div class="d-flex flex-column flex-grow-1 overlay-host">
    @if (ConversationService.Current == null)
    {
        <div class="overlay"></div>
    }
    @if (Busy)
    {
        <div class="overlay">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    <InputTextArea id="editorTextarea"
                   class="form-control flex-grow-1"
                   @bind-Value="Text"
                   @bind-Value:after="TextChanged"/>
    <div class="d-flex flex-wrap mx-n1">
        <EditorButton OnTriggered="@HandleActionAsync" ActionName="ActionName.Reformulate"></EditorButton>
        <EditorButton OnTriggered="@HandleActionAsync" ActionName="ActionName.Improve"></EditorButton>
        <EditorButton OnTriggered="@HandleActionAsync" ActionName="ActionName.Summarize"></EditorButton>
        <EditorButton OnTriggered="@HandleActionAsync" ActionName="ActionName.Expand"></EditorButton>
        <EditorButton OnTriggered="@(() => Text = UndoService.Undo())"
                      Enabled="@UndoService.CanUndo" Name="Undo"></EditorButton>
        <EditorButton OnTriggered="@(() => Text = UndoService.Redo())"
                      Enabled="@UndoService.CanRedo" Name="Redo"></EditorButton>
    </div>
</div>

@code {
    private string Text { get; set; } = "";
    private bool Busy { get; set; } = false;

    protected override void OnInitialized()
    {
        ConversationService.RegisterOnConversationChange(c =>
        {
            if (c == null)
            {
                Text = "";
                UndoService.Clean();
            }
            else
            {
                Text = c.Text;
                UndoService.Register(Text);
            }
        });
    }

    private void TextChanged()
    {
        UndoService.Register(Text);
        ConversationService.Text = Text;
    }

    private async Task HandleActionAsync(ActionName actionName)
    {
        //TODO: Fix Loading Pattern for Text
        Busy = true;
        var selection = await GetSelectionAsync();
        await ConversationService.ApplyActionAsync(actionName, selection);
        Busy = false;
    }

    private async Task<Selection?> GetSelectionAsync()
    {
        const string textareaId = "editorTextarea";
        var selectionStart = await JsRuntime.InvokeAsync<int>("getSelectionStart", textareaId);
        var selectionEnd = await JsRuntime.InvokeAsync<int>("getSelectionEnd", textareaId);
        return selectionStart == -1 || selectionEnd == -1 || selectionStart == selectionEnd
            ? null
            : new Selection(selectionStart, selectionEnd);
    }

}
